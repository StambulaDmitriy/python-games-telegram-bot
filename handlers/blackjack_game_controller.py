import asyncio
import random

from aiogram import types
from aiogram.fsm.context import FSMContext

import keyboards
from bootstrap import Database
from services import validate_bet
from states.blackjack_game_states import BlackjackGameStates


async def start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:", reply_markup=keyboards.back_to_menu_keyboard.keyboard)
    await state.set_state(BlackjackGameStates.BetPending)


async def return_to_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=keyboards.main_menu_keyboard.keyboard)


async def handle_bet(message: types.Message, state: FSMContext):
    db = Database().getInstance()
    users_table = db.casino.users

    user = users_table.find_one({"_id": message.from_user.id})

    if user is None:
        await message.answer("–í—ã –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start", reply_markup=types.ReplyKeyboardRemove())
        return

    bet_validating_res = validate_bet(message.text, user['balance'])

    if bet_validating_res != True:
        await message.answer(bet_validating_res)
        await start(message, state)
        return

    bet = int(message.text)

    deck = get_deck()
    user_hand = [deck.pop(), deck.pop()]
    dealer_hand = [deck.pop(), deck.pop()]

    await state.update_data(deck=deck, user_hand=user_hand, dealer_hand=dealer_hand, bet=bet)
    await state.set_state(BlackjackGameStates.UserPlaying)

    await message.answer('–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –î–∏–ª–ª–µ—Ä —Ä–∞–∑–¥–∞—ë—Ç –∫–∞—Ä—Ç—ã... –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–∏–ª–ª–µ—Ä–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–∞', reply_markup=types.ReplyKeyboardRemove())

    await show_cards_and_ask_user_choice(message, state)


async def show_cards_and_ask_user_choice(message: types.Message, state: FSMContext):
    data = await state.get_data()

    user_hand = data['user_hand']
    dealer_hand = data['dealer_hand']

    await message.answer('\n'.join(get_display_hands(user_hand, dealer_hand, False)))

    if get_hand_value(user_hand) >= 21:
        await blackjack_check_result(message, state)
        return

    await message.answer("–í–∞—à —Ö–æ–¥:", reply_markup=keyboards.blackjack_menu_keyboard.keyboard)


async def handle_user_choice(message: types.Message, state: FSMContext):
    if message.text not in [
        keyboards.blackjack_menu_keyboard.HIT_BUTTON_TEXT,
        keyboards.blackjack_menu_keyboard.STAND_BUTTON_TEXT,
    ]:
        await message.answer("‚ôøÔ∏è –¢–∞–∫–æ–π —Ö–æ–¥ —Å–¥–µ–ª–∞—Ç—å –Ω–µ–ª—å–∑—è!")
        await show_cards_and_ask_user_choice(message, state)
        return

    if message.text == keyboards.blackjack_menu_keyboard.HIT_BUTTON_TEXT:
        data = await state.get_data()
        new_card = data['deck'].pop()
        data['user_hand'].append(new_card)
        await message.answer("–í—ã –≤–∑—è–ª–∏ {} {}".format(new_card[0], new_card[1]))
        await state.set_data(data)

        await show_cards_and_ask_user_choice(message, state)
    else:
        await blackjack_check_result(message, state)


async def blackjack_check_result(message: types.Message, state: FSMContext):
    data = await state.get_data()

    deck = data['deck']
    user_hand = data['user_hand']
    dealer_hand = data['dealer_hand']
    bet = data['bet']

    if get_hand_value(user_hand) < 21:
        await state.set_state(BlackjackGameStates.DealerPlaying)
        await message.answer("–î–∏–ª–ª–µ—Ä —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É")
        await message.answer("\n".join(get_display_hands(user_hand, dealer_hand, True)))
        await asyncio.sleep(3)
        while get_hand_value(dealer_hand) < 17:
            dealer_hand.append(deck.pop())
            await message.answer("–£ –î–∏–ª–ª–µ—Ä–∞ –Ω–∞ —Ä—É–∫–∞—Ö –º–µ–Ω—å—à–µ 17. –ë–µ—Ä—ë—Ç –µ—â—ë –æ–¥–Ω—É –∫–∞—Ä—Ç—É...")
            await message.answer("\n".join(get_display_hands(user_hand, dealer_hand, True)))
            await asyncio.sleep(3)

    player_value = get_hand_value(user_hand)
    dealer_value = get_hand_value(dealer_hand)

    balance_change = 0
    if player_value == 21:
        await message.answer(f"ü•≥ –£ –≤–∞—Å –æ—á–∫–æ! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${bet*2}")
        balance_change = bet*2
    elif dealer_value > 21:
        await message.answer(f'ü•≥ –î–∏–ª–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª –∫–∞—Ä—Ç! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${bet*2}!')
        balance_change = bet*2
    elif player_value > 21:
        await message.answer(f'‚ö∞Ô∏è –í—ã –ø–µ—Ä–µ–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${bet}!')
        balance_change = -bet
    elif player_value < dealer_value:
        await message.answer(f'‚ö∞Ô∏è –î–∏–ª–ª–µ—Ä –Ω–∞–±—Ä–∞–ª –±–æ–ª—å—à–µ –æ—á–∫–æ–≤! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${bet}!')
        balance_change = -bet
    elif player_value > dealer_value:
        await message.answer(f'ü•≥ –í—ã –Ω–∞–±—Ä–∞–ª–∏ –±–æ–ª—å—à–µ –¥–∏–ª–ª–µ—Ä–∞! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${bet*2}!')
        balance_change = bet*2
    elif player_value == dealer_value:
        await message.answer('üòï –ù–∏—á—å—è... –°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è')
        balance_change = 0

    client = Database().getInstance()
    client.casino.users.update_one({"_id": message.from_user.id}, {
        "$inc": {
            "balance": balance_change
        }
    })

    await state.set_data({})

    await start(message, state)


def get_deck():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–æ–º–∏–Ω–∞–ª, –º–∞—Å—Ç—å) –¥–ª—è –≤—Å–µ—Ö 52 –∫–∞—Ä—Ç."""
    deck = []
    for suit in ('‚ô†', '‚ô£', '‚ô•', '‚ô¶'):
        for rank in range(2, 11):
            deck.append((str(rank), suit)) # –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–∞—Ä—Ç—ã.
        for rank in ('J', 'Q', 'K', 'A'):
            deck.append((rank, suit)) # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–≥—É—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏ —Ç—É–∑—ã.
    random.shuffle(deck)
    return deck


def get_display_hands(user_hand, dealer_hand, showFirstCard):
    rows = []
    if not showFirstCard:
        rows.append("–ö–∞—Ä—Ç—ã –¥–∏–ª–ª–µ—Ä–∞ (–æ—á–∫–æ–≤: ???):")
    else:
        rows.append(f"–ö–∞—Ä—Ç—ã –¥–∏–ª–ª–µ—Ä–∞ (–æ—á–∫–æ–≤: {get_hand_value(dealer_hand)}):")

    rows += get_display_cards(dealer_hand, showFirstCard)

    rows.append(f'–í–∞—à–∏ –∫–∞—Ä—Ç—ã (–æ—á–∫–æ–≤: {get_hand_value(user_hand)}):')
    rows += get_display_cards(user_hand, True)

    return rows


def get_display_cards(cards, showFirstCard):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç."""
    rows = ['', '', '', '', ''] # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–µ–∫—Å—Ç.

    for i, card in enumerate(cards):
        rows[0] += ' ____  ' # –í—ã–≤–æ–¥–∏–º –≤–µ—Ä—Ö–Ω—é—é —Å—Ç—Ä–æ–∫—É –∫–∞—Ä—Ç—ã.
        if i == 0 and showFirstCard is False:
            rows[1] += '|##  | '
            rows[2] += '| ## | '
            rows[3] += '|__##| '
        else:
            rank, suit = card
            rows[1] += '|{}  | '.format(rank.ljust(2))
            rows[2] += '| {} | '.format(suit)
            rows[3] += '|__{}| '.format(rank.rjust(2, '_'))

    for i in range(4):
        rows[i] = '<code>' + rows[i] + '</code>'

    return rows


def get_hand_value(cards):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞—Ä—Ç. –§–∏–≥—É—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å—Ç–æ—è—Ç 10, —Ç—É–∑—ã ‚Äî 11
    –∏–ª–∏ 1 –æ—á–∫–æ (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞—Ä—Ç—ã)."""
    value = 0
    numberOfAces = 0

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞—Ä—Ç—ã ‚Äî –Ω–µ —Ç—É–∑–∞:
    for card in cards:
        rank = card[0] # –∫–∞—Ä—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫–æ—Ä—Ç–µ–∂ (–Ω–æ–º–∏–Ω–∞–ª, –º–∞—Å—Ç—å)
        if rank == 'A':
            numberOfAces += 1
        elif rank in ('K', 'Q', 'J'): # –§–∏–≥—É—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å—Ç–æ—è—Ç 10 –æ—á–∫–æ–≤.
            value += 10
        else:
            value += int(rank) # –°—Ç–æ–∏–º–æ—Å—Ç—å —á–∏—Å–ª–æ–≤—ã—Ö –∫–∞—Ä—Ç —Ä–∞–≤–Ω–∞ –∏—Ö –Ω–æ–º–∏–Ω–∞–ª—É.

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ç—É–∑–æ–≤:
    value += numberOfAces # –î–æ–±–∞–≤–ª—è–µ–º 1 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—É–∑–∞.
    for i in range(numberOfAces):
    # –ï—Å–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ 10 —Å –ø–µ—Ä–µ–±–æ—Ä–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º:
        if value + 10 <= 21:
            value += 10

    return value

