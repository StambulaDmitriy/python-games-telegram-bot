import asyncio
import random

from aiogram import types
from aiogram.fsm.context import FSMContext

import keyboards
from bootstrap import Database
from services import validate_bet
from states.roulette_game_states import RouletteGameStates


async def start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:", reply_markup=keyboards.back_to_menu_keyboard.keyboard)
    await state.set_state(RouletteGameStates.BetSumPending)


async def return_to_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=keyboards.main_menu_keyboard.keyboard)


async def return_to_bet(message: types.Message, state: FSMContext):
    await state.set_data({})
    await start(message, state)


async def handle_bet_sum(message: types.Message, state: FSMContext):
    db = Database().getInstance()
    users_table = db.casino.users

    user = users_table.find_one({"_id": message.from_user.id})

    if user is None:
        await message.answer("–í—ã –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    bet_validating_res = validate_bet(message.text, user['balance'])

    if bet_validating_res != True:
        await message.answer(bet_validating_res)
        await start(message, state)
        return

    bet = int(message.text)

    await state.update_data(bet=bet)
    await state.set_state(RouletteGameStates.BetPlacePending)

    await ask_bet_place(message, state)


async def ask_bet_place(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞ —á—Ç–æ —Å—Ç–∞–≤–∏–º? –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ:", reply_markup=keyboards.roulette_bet_places_keyboard.keyboard)


def is_valid_bet_place(bet_place):
    if bet_place in [
        keyboards.roulette_bet_places_keyboard.BLACK_PLACE_BUTTON_TEXT,
        keyboards.roulette_bet_places_keyboard.RED_PLACE_BUTTON_TEXT,
        keyboards.roulette_bet_places_keyboard.FIRST_COLUMN_PLACE_BUTTON_TEXT,
        keyboards.roulette_bet_places_keyboard.SECOND_COLUMN_PLACE_BUTTON_TEXT,
        keyboards.roulette_bet_places_keyboard.THIRD_COLUMN_PLACE_BUTTON_TEXT,
        keyboards.roulette_bet_places_keyboard.FIRST_HALF_PLACE_BUTTON_TEXT,
        keyboards.roulette_bet_places_keyboard.SECOND_HALF_PLACE_BUTTON_TEXT,
    ]:
        return True

    if bet_place.isdigit() and 0 <= int(bet_place) <= 36:
        return True

    return False


async def handle_bet_place(message: types.Message, state: FSMContext):
    if not is_valid_bet_place(message.text):
        await message.answer("–î–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
        await ask_bet_place(message, state)
        return

    bet_place = message.text
    await state.set_state(RouletteGameStates.ResultsPending)
    await message.answer("–°—Ç–∞–≤–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã. –°—Ç–∞–≤–æ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç.\n–î–∏–ª–ª–µ—Ä —Ä–∞—Å–∫—Ä—É—á–∏–≤–∞–µ—Ç —Ä—É–ª–µ—Ç–∫—É...")
    await state.bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(3)

    spin_result = random.randint(0, 36)
    if spin_result == 0:
        spin_result_text = "0 - –∑–∏—Ä–æ!"
    elif spin_result % 2 == 0:
        spin_result_text = f"{spin_result} - üî¥"
    else:
        spin_result_text = f"{spin_result} - ‚ö´"

    x = {'0': '0Ô∏è‚É£', '1': '1Ô∏è‚É£', '2': '2Ô∏è‚É£', '3': '3Ô∏è‚É£', '4': '4Ô∏è‚É£', '5': '5Ô∏è‚É£', '6': '6Ô∏è‚É£', '7': '7Ô∏è‚É£', '8': '8Ô∏è‚É£', '9': '9Ô∏è‚É£'}
    tbl = spin_result_text.maketrans(x)
    spin_result_text = spin_result_text.translate(tbl)

    await message.answer(spin_result_text)
    await asyncio.sleep(3)

    win_places = {spin_result: 36}

    if spin_result != 0:
        if spin_result % 2 == 0:
            win_places[keyboards.roulette_bet_places_keyboard.RED_PLACE_BUTTON_TEXT] = 2
        else:
            win_places[keyboards.roulette_bet_places_keyboard.BLACK_PLACE_BUTTON_TEXT] = 2

        if spin_result in range(1,19):
            win_places[keyboards.roulette_bet_places_keyboard.FIRST_HALF_PLACE_BUTTON_TEXT] = 2
        else:
            win_places[keyboards.roulette_bet_places_keyboard.SECOND_HALF_PLACE_BUTTON_TEXT] = 2

        if spin_result in range(1, 37, 3):
            win_places[keyboards.roulette_bet_places_keyboard.FIRST_COLUMN_PLACE_BUTTON_TEXT] = 3
        elif spin_result in range(2, 37, 3):
            win_places[keyboards.roulette_bet_places_keyboard.SECOND_COLUMN_PLACE_BUTTON_TEXT] = 3
        elif spin_result in range(3, 37, 3):
            win_places[keyboards.roulette_bet_places_keyboard.THIRD_COLUMN_PLACE_BUTTON_TEXT] = 3

    data = await state.get_data()
    bet = data['bet']

    if bet_place not in win_places:
        balance_change = -bet
        await message.answer(f"‚ö∞Ô∏è–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–µ —Å—ã–≥—Ä–∞–ª–∞! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${bet}")
    else:
        koef = win_places[bet_place]
        balance_change = bet * koef
        await message.answer(f"ü•≥ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Å—ã–≥—Ä–∞–ª–∞! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${bet * koef}")

    client = Database().getInstance()
    client.casino.users.update_one({"_id": message.from_user.id}, {
        "$inc": {
            "balance": balance_change
        }
    })

    await state.set_data({})

    await start(message, state)
